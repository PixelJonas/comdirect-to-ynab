{"version":3,"sources":["serviceWorker.js","store/actions/ynab.js","store/actions/general.js","store/reducers/ynab.js","store/actions/csv.js","store/reducers/csv.js","store/actions/map.js","store/selectors/map.js","store/selectors/csv.js","store/middleware/ynab.js","store/selectors/ynab.js","containers/YNABLoginButton.js","LoginButton.js","csv/parser/foreignTransactionParser.js","csv/parser/ownTransactionParser.js","csv/parser/cardDisposalTransactionParser.js","csv/parser/creditCardPayoffParser.js","csv/parser/creditCardTransactionParser.js","csv/parser/creditCardForeignCurrencyFeeParser.js","csv/parser/creditCartBillParser.js","csv/parser/creditCardCarryoverParser.js","csv/comdirectReader.js","DropZone.js","containers/CSVDropZone.js","AccountRow.js","containers/YNABAccountRow.js","SendToYNABButton.js","containers/YNABSendToYnabButton.js","App.js","containers/YNABApp.js","index.js","store/reducers/map.js"],"names":["Boolean","window","location","hostname","match","YNAB_SET_ACCESS_TOKEN","YNAB_LOGIN","YNAB_LOGIN_PENDING","YNAB_LOAD_BUDGETS","YNAB_SET_BUDGETS","YNAB_SEND_TRANSACTIONS","YNAB_ADD_IMPORT_RESULT","setAccessToken","accessToken","type","loginPending","IMPORT_FINISHED","action","budgets","addImportResult","successful","result","budget","CSV_ADD_ACCOUNTS","addAccounts","state","accounts","ADD_MAPPING","getMapping","map","csv","findAccount","accountId","find","account","id","loadBudgets","dispatch","ynabClient","getBudgets","then","response","data","Promise","all","getAccounts","accountsResponse","forEach","i","filter","closed","setBudgets","getBudget","budgetId","mapValue","value","parseInt","toFixed","mapTransactions","listOfAccounts","transactionCache","allTransactions","transactions","transaction","name","amountOfSimilarTransactions","t","valueDate","getTime","length","push","date","amount","payee","substr","memo","text","cleared","toISOString","mapTransaction","ynab","sendTransactions","mapping","csvAccount","mapToBudgets","imports","promise","createTransactions","importFinished","importResults","authEndpoint","href","YNABLoginButton","connect","onClick","content","className","disabled","regex","parse","exec","reference","canParse","test","iban","bic","creditCardNo","trim","startAccountRegex","checkingTransactionRegex","dateRegex","YEAR","MONTH","DAY","VALUE_DATE","BOOKING_DATE","PROCESS","TEXT","VALUE","parseDate","dateString","Date","parsers","ownTransactionParser","foreignTransactionParser","cardTransactionParser","creditCardPayoffParser","creditCardTransactionParser","creditCardForeignCurrencyFeeParser","creditCartBillParser","creditCardCarryoverParser","readTransaction","line","numberString","bookingDate","process","replace","parseFloat","parser","Error","parseText","readAccounts","split","index","firstLineIsInvalid","startsNewAccount","isCheckingTransaction","uuidv1","readAccount","readFile","file","resolve","fileReader","FileReader","addEventListener","readAsText","getBorderColor","isDraggingOver","handleDrag","handler","event","preventDefault","DropZone","useState","setDraggingOver","style","border","minHeight","onDragOver","onDragLeave","onDrop","files","fileReaders","fileResults","reduce","allAccounts","filesAccounts","read","dataTransfer","catch","error","console","log","CSVDropZone","AccountRow","addMapping","setBudget","ynabAccount","setYnabAccount","useEffect","onChange","target","newBudget","b","key","newAccount","a","YNABAccountRow","SendToYNABButton","sendToYNAB","YNABSendToYNABButton","App","results","showCSVDropZone","showAccounts","showResults","transaction_ids","duplicate_import_ids","YNABApp","bugetId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","Object","assign","applyMiddleware","thunkMiddleware","getState","next","user","getUser","login","accessTokenPattern","hash","sessionStorage","setItem","getItem","ynabAccessToken","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d00f3ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const YNAB_SET_ACCESS_TOKEN = \"YNAB_SET_ACCESS_TOKEN\";\nexport const YNAB_LOGIN = \"YNAB_LOGIN\";\nexport const YNAB_LOGIN_PENDING = \"YNAB_LOGIN_PENDING\";\nexport const YNAB_LOAD_BUDGETS = \"YNAB_LOAD_BUDGET\";\nexport const YNAB_SET_BUDGETS = \"YNAB_SET_BUDGETS\";\nexport const YNAB_SEND_TRANSACTIONS = \"YNAB_SEND_TRANSACTIONS\";\nexport const YNAB_ADD_IMPORT_RESULT = \"YNAB_ADD_IMPORT_RESULT\";\n\nexport function setBudgets(budgets) {\n    return {type: YNAB_SET_BUDGETS, budgets};\n}\n\nexport function loadBudgets() {\n    return {type: YNAB_LOAD_BUDGETS};\n}\n\nexport function login(accessToken) {\n    return {type: YNAB_LOGIN, accessToken};\n}\n\nexport function setAccessToken(accessToken) {\n    return {type: YNAB_SET_ACCESS_TOKEN, accessToken};\n}\n\nexport function loginPending(loginPending) {\n    return {type: YNAB_LOGIN_PENDING, loginPending};\n}\n\nexport function sendTransations() {\n    return {type: YNAB_SEND_TRANSACTIONS};\n}\n\nexport function addImportResult(budget, result) {\n    return {type: YNAB_ADD_IMPORT_RESULT, budget, result, successful: true};\n}","export const IMPORT_FINISHED = \"IMPORT_FINISHED\";\n\nexport function importFinished() {\n    return {type: IMPORT_FINISHED};\n}","import {YNAB_ADD_IMPORT_RESULT, YNAB_LOGIN_PENDING, YNAB_SET_ACCESS_TOKEN, YNAB_SET_BUDGETS} from \"../actions/ynab\";\nimport {IMPORT_FINISHED} from \"../actions/general\";\n\nfunction accessToken(action) {\n    return action.accessToken;\n}\n\nfunction loginPending(action) {\n    return action.loginPending;\n}\n\nfunction budgets(action) {\n    return action.budgets;\n}\n\nfunction addImportResult(action) {\n    let {successful, result, budget} = action;\n    return {successful, result, budget};\n}\n\nexport function ynab(state = {importResults: []}, action) {\n    switch (action.type) {\n        case YNAB_SET_ACCESS_TOKEN:\n            return {...state, accessToken: accessToken(action)};\n        case YNAB_LOGIN_PENDING:\n            return {...state, loginPending: loginPending(action)};\n        case YNAB_SET_BUDGETS:\n            return {...state, budgets: budgets(action)};\n        case YNAB_ADD_IMPORT_RESULT:\n            return {...state, importResults: [...state.importResults, addImportResult(action)]};\n        case IMPORT_FINISHED:\n            return {...state, importFinished: true};\n        default:\n            return state;\n    }\n}","export const CSV_ADD_ACCOUNTS = \"CSV_ADD_ACCOUNTS\";\n\nexport function addAccounts(accounts) {\n    return {\n        type: CSV_ADD_ACCOUNTS,\n        accounts\n    };\n}","import {CSV_ADD_ACCOUNTS} from \"../actions/csv\";\nimport {IMPORT_FINISHED} from \"../actions/general\";\n\nfunction addAccounts(state, accounts) {\n    return {...state, accounts: [...state.accounts, ...accounts]}\n}\n\nexport function csv(state = {accounts: []}, action) {\n    switch (action.type) {\n        case CSV_ADD_ACCOUNTS:\n            return addAccounts(state, action.accounts);\n        case IMPORT_FINISHED:\n            return {accounts: []};\n        default:\n            return state;\n    }\n}","export const ADD_MAPPING = \"ADD_MAPPING\";\n\nexport function addMapping(mapping) {\n    return {\n        type: ADD_MAPPING,\n        mapping\n    }\n}","export const getMapping = state => state.map;","export const accounts = state => state.csv.accounts;\nexport const findAccount = (state, accountId) => accounts(state).find(account => account.id === accountId);","import * as ynab from 'ynab';\nimport {\n    addImportResult,\n    loginPending,\n    setAccessToken,\n    setBudgets,\n    YNAB_LOAD_BUDGETS,\n    YNAB_LOGIN,\n    YNAB_SEND_TRANSACTIONS\n} from \"../actions/ynab\";\nimport {getMapping} from \"../selectors/map\";\nimport {findAccount} from \"../selectors/csv\";\nimport {importFinished} from \"../actions/general\";\n\nfunction login(dispatch, accessToken) {\n    dispatch(loginPending(true));\n    let ynabClient = new ynab.API(accessToken);\n    return ynabClient.user.getUser().then(() => {\n        dispatch(setAccessToken(accessToken));\n        dispatch(loginPending(false));\n        return ynabClient;\n    }).catch(() => {\n        dispatch(setAccessToken(null));\n        dispatch(loginPending(false));\n        return null;\n    })\n}\n\nfunction loadBudgets(dispatch, ynabClient) {\n    return ynabClient.budgets.getBudgets().then(response => {\n        let budgets = response.data.budgets;\n        Promise.all(budgets.map(budget => ynabClient.accounts.getAccounts(budget.id)))\n            .then(accountsResponse => {\n                accountsResponse\n                    .forEach((accountsResponse, i) => budgets[i].accounts = accountsResponse.data.accounts.filter(account => !account.closed));\n                dispatch(setBudgets(budgets));\n            });\n    });\n}\n\nfunction getBudget(budgets, budgetId) {\n    let budget = budgets[budgetId];\n    if (!budget) {\n        budgets[budgetId] = {\n            id: budgetId,\n            accounts: []\n        }\n    }\n    return budgets[budgetId];\n}\n\nfunction mapToBudgets(mapping) {\n    let budgets = {};\n    for (let csvAccount in mapping) {\n        if (!mapping[csvAccount].account) {\n            continue;\n        }\n        let budget = getBudget(budgets, mapping[csvAccount].budget);\n        budget.accounts.push({csv: csvAccount, ynab: mapping[csvAccount].account});\n    }\n    return budgets;\n}\n\nfunction cropPayeeName(name) {\n    if(name === null || name.length <= 50) {\n        return name;\n    }\n    return name.substr(0, 50);\n}\n\nfunction mapValue(value) {\n    return parseInt((value * 1000).toFixed(0));\n}\n\nfunction mapTransaction(transaction, accountId, transactionCache) {\n    let amountOfSimilarTransactions = transactionCache.filter(t => t.valueDate.getTime() === transaction.valueDate.getTime() && t.value === transaction.value).length;\n    transactionCache.push(transaction);\n    return {\n        'account_id': accountId,\n        date: transaction.valueDate,\n        amount: mapValue(transaction.value),\n        'payee_name': cropPayeeName(transaction.payee.name),\n        memo: transaction.text,\n        cleared: 'cleared',\n        'import_id': `comdirect:${mapValue(transaction.value)}:${transaction.valueDate.toISOString().substr(0, 10)}:${amountOfSimilarTransactions}`\n    }\n}\n\nfunction mapTransactions(listOfAccounts, state, transactionCache) {\n    let allTransactions = [];\n    for(let accounts of listOfAccounts) {\n        let csvAccount = findAccount(state, accounts.csv);\n        let transactions = csvAccount.transactions.map(transaction => mapTransaction(transaction, accounts.ynab, transactionCache));\n        transactions.forEach(transaction => allTransactions.push(transaction));\n    }\n    return allTransactions;\n}\n\nfunction sendTransactions(state, ynabClient, dispatch) {\n    let budgets = mapToBudgets(getMapping(state));\n    let transactionCache = [];\n    let imports = [];\n    for (let budget in budgets) {\n        let transactions = mapTransactions(budgets[budget].accounts, state, transactionCache);\n        let promise = ynabClient.transactions.createTransactions(budget, {transactions})\n            .then(result => dispatch(addImportResult(budget, result)));\n        imports.push(promise);\n    }\n    Promise.all(imports).then(() => dispatch(importFinished()));\n}\n\nexport const ynabMiddleware = ({dispatch, getState}) => {\n    let ynabClient;\n    return next => action => {\n        switch (action.type) {\n            case YNAB_LOGIN:\n                return login(dispatch, action.accessToken).then(result => {ynabClient = result});\n            case YNAB_LOAD_BUDGETS:\n                return loadBudgets(dispatch, ynabClient);\n            case YNAB_SEND_TRANSACTIONS:\n                return sendTransactions(getState(), ynabClient, dispatch);\n            default:\n                return next(action);\n        }\n    }\n};","export const accessToken = state => state.ynab.accessToken;\nexport const loginPending = state => state.ynab.loginPending;\nexport const budgets = state => state.ynab.budgets;\nexport const budget = (state, budgetId) => state.ynab.budgets.find(budget => budget.id === budgetId);\nexport const importFinished = state => state.ynab.importFinished;\nexport const importResults = state => state.ynab.importResults;","import {connect} from \"react-redux\";\nimport {accessToken, loginPending} from \"../store/selectors/ynab\";\nimport {LoginButton} from \"../LoginButton\";\n\nlet clientId = \"dae768ce4e0279d3d9f7721f0828630c72a16189ffc68ce9b1087ababb37a6f0\";\n\nlet authEndpoint = `https://app.youneedabudget.com/oauth/authorize?client_id=${clientId}&redirect_uri=${window.location.href}&response_type=token`;\n\nlet mapStateToProps = state => ({\n    accessToken: accessToken(state),\n    loginPending: loginPending(state),\n    onClick: () => window.location.href = authEndpoint\n});\n\nconst YNABLoginButton = connect(mapStateToProps)(LoginButton);\n\nexport default YNABLoginButton;","import React from \"react\";\n\nexport const LoginButton = ({accessToken, loginPending, onClick}) => {\n    if (accessToken) {\n        return null;\n    }\n    let content = loginPending ?\n        \"Logging in ...\" :\n        \"Login with YNAB\";\n    return <button type=\"button\" className=\"btn btn-primary text\" onClick={onClick} disabled={loginPending}>{content}</button>\n};","const regex = / Auftraggeber: (.+)Buchungstext: (.+) Ref\\. (.+) /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[1]\n        },\n        text: match[2],\n        reference: match[3]\n    }\n}\n\nexport default {parse, canParse}","const regex = / (Empfänger|Auftraggeber): (.+)Kto\\/IBAN: (\\w+) BLZ\\/BIC: (\\w+)( Buchungstext: (.+))? Ref\\. (.+)/;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[2],\n            iban: match[3],\n            bic: match[4]\n        },\n        text: match[6],\n        reference: match[7]\n    }\n}\n\nexport default {parse, canParse}","const regex = / Buchungstext: (.+) Ref\\. (.+) /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: null\n        },\n        text: match[1],\n        reference: match[2]\n    }\n}\n\nexport default {parse, canParse}","const regex = / Empfänger: (.+)Buchungstext: ((\\d+) Ueberweisung von Girokonto auf Visa-Karte) Ref\\. (.+) /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[1],\n            creditCardNo: match[3]\n        },\n        text: match[2],\n        reference: match[4]\n    }\n}\n\nexport default {parse, canParse}","const regex = / (.+[^A-Z])[A-Z].+?\\d\\d\\d/;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[1].trim()\n        }\n    }\n}\n\nexport default {parse, canParse}","const regex = / \\d\\.\\d\\d PROZ.AUSLANDSENTGELT /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    return {\n        payee: {\n            name: \"comdirect\"\n        },\n        text\n    }\n}\n\nexport default {parse, canParse}","const regex = / SUMME MONATSABRECHNUNG VISA /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    return {\n        payee: {\n            name: \"Visa\"\n        }\n    }\n}\n\nexport default {parse, canParse}","const regex = / UEBERTRAG AUF VISA-KARTE /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    return {\n        payee: {\n            name: \"Self\"\n        },\n        text: text\n    }\n}\n\nexport default {parse, canParse}","import foreignTransactionParser from \"./parser/foreignTransactionParser\";\nimport ownTransactionParser from \"./parser/ownTransactionParser\";\nimport cardTransactionParser from \"./parser/cardDisposalTransactionParser\";\nimport creditCardPayoffParser from \"./parser/creditCardPayoffParser\";\nimport creditCardTransactionParser from \"./parser/creditCardTransactionParser\";\nimport creditCardForeignCurrencyFeeParser from \"./parser/creditCardForeignCurrencyFeeParser\";\nimport creditCartBillParser from \"./parser/creditCartBillParser\";\nimport creditCardCarryoverParser from \"./parser/creditCardCarryoverParser\";\nimport uuidv1 from 'uuid/v1';\n\nconst startAccountRegex = /\"Umsätze (.+) \";\"Zeitraum: ([\\d])+ Tage\";/;\nconst checkingTransactionRegex = /\"([\\d]{2}.[\\d]{2}.[\\d]{4})\";\"([\\d]{2}.[\\d]{2}.[\\d]{4})\";\"([^\"]*)\";(\"([^\"]*)\";)?\"([^\"]*)\";\"(-?[\\d.,]+)\";/;\nconst dateRegex = /([\\d]{2}).([\\d]{2}).([\\d]{4})/;\nconst textRegex = / ((Empfänger|Auftraggeber): (.*))?(Buchungstext: (.*))? Ref. (.*) /;\n\nconst YEAR = 3;\nconst MONTH = 2;\nconst DAY = 1;\n\nconst VALUE_DATE = 1;\nconst BOOKING_DATE = 2;\nconst PROCESS = 3;\nconst TEXT = 6;\nconst VALUE = 7;\n\nfunction parseDate(dateString) {\n    let match = dateRegex.exec(dateString);\n    return new Date(match[YEAR], match[MONTH]-1, match[DAY], 12);\n}\n\nfunction parseNumber(numberString) {\n    numberString = numberString.replace(/\\./g, \"\");\n    numberString = numberString.replace(\",\", \".\");\n    return parseFloat(numberString);\n}\n\nconst parsers = [\n    ownTransactionParser,\n    foreignTransactionParser,\n    cardTransactionParser,\n    creditCardPayoffParser,\n    creditCardTransactionParser,\n    creditCardForeignCurrencyFeeParser,\n    creditCartBillParser,\n    creditCardCarryoverParser];\n\nfunction parseText(text) {\n    let parser = parsers.find(parser => parser.canParse(text));\n    if (!parser) {\n        throw new Error(`Cannot parse text ${text}`);\n    }\n    return parser.parse(text);\n}\n\nfunction firstLineIsInvalid(index, line) {\n    return index === 0 && (line !== ';' && line.trim() !== '');\n}\n\nfunction startsNewAccount(line) {\n    return startAccountRegex.test(line);\n}\n\nfunction readAccount(line) {\n    let name = startAccountRegex.exec(line)[1];\n    let account = {name, id: uuidv1(), transactions: []};\n    return account;\n}\n\nfunction readTransaction(line) {\n    let match = checkingTransactionRegex.exec(line);\n\n\n    let transaction = {\n        valueDate: parseDate(match[VALUE_DATE]),\n        bookingDate: parseDate(match[BOOKING_DATE]),\n        process: match[PROCESS],\n        value: parseNumber(match[VALUE]),\n        ...parseText(match[TEXT])\n    };\n    return transaction;\n}\n\nfunction isCheckingTransaction(line) {\n    return checkingTransactionRegex.test(line);\n}\n\nfunction readAccounts(text) {\n    let accounts = [];\n    text = text.replace(/\\r\\n\"neu\";/g, \"\");\n    let lines = text.split(\"\\r\\n\");\n    lines.forEach((line, index) => {\n        if(firstLineIsInvalid(index, line)) {\n            throw new Error(\"Unexpected file format\");\n        }\n        if(startsNewAccount(line)){\n            accounts.push(readAccount(line));\n        } else if(isCheckingTransaction(line)) {\n            accounts[accounts.length-1].transactions.push(readTransaction(line));\n        }\n    });\n    return accounts.filter(account => account.transactions.length > 0);\n}\n\nfunction readFile(file) {\n    return new Promise((resolve) => {\n        let fileReader = new FileReader();\n        fileReader.addEventListener('load', () => {\n            resolve(readAccounts(fileReader.result));\n        });\n        fileReader.readAsText(file, \"cp1252\");\n    });\n}\n\nexport function read(files) {\n    let fileReaders = [];\n    for(let i = 0 ; i < files.length ; i++) {\n        fileReaders.push(readFile(files[i]));\n    }\n    return Promise.all(fileReaders)\n        .then(fileResults =>\n            fileResults.reduce((allAccounts,filesAccounts) => [...allAccounts, ...filesAccounts], [])\n        );\n}","import React, {useState} from \"react\";\nimport {read} from \"./csv/comdirectReader\";\n\nfunction getBorderColor(isDraggingOver) {\n    return isDraggingOver ? 'black' : 'grey';\n}\n\nfunction handleDrag(handler) {\n    return event => {\n        event.preventDefault();\n        handler();\n    }\n}\n\nfunction DropZone({addAccounts}) {\n\n    const [isDraggingOver, setDraggingOver] = useState(false);\n\n    let handleDrop = function(event) {\n        event.preventDefault();\n        setDraggingOver(false);\n        read(event.dataTransfer.files)\n            .then(accounts => {\n                addAccounts(accounts)\n            }).catch(error => console.log(error));\n    };\n\n    return <div\n            style={{border: `2px dashed ${getBorderColor(isDraggingOver)}`, minHeight: '100px'}}\n            className=\"d-flex align-items-center justify-content-center\"\n            onDragOver={handleDrag(() => setDraggingOver(true))}\n            onDragLeave={handleDrag(() => setDraggingOver(false))}\n            onDrop={handleDrop}>\n        Drop CSV file here\n    </div>\n}\n\nexport default DropZone;","import {addAccounts} from \"../store/actions/csv\";\nimport {connect} from \"react-redux\";\nimport DropZone from \"../DropZone\";\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addAccounts: accounts => dispatch(addAccounts(accounts))\n    }\n}\n\nconst CSVDropZone = connect(null, mapDispatchToProps)(DropZone);\n\nexport default CSVDropZone;","import React, {useState, useEffect} from \"react\";\nimport {ynab} from \"./store/reducers/ynab\";\n\nfunction AccountRow({account, budgets, addMapping}) {\n    const [budget, setBudget] = useState(budgets[0]);\n    const [ynabAccount, setYnabAccount] = useState(null);\n\n    useEffect(() => {\n        addMapping({\n            [account.id]: {\n                account: ynabAccount ? ynabAccount.id : null,\n                budget: budget.id\n            }\n        });\n    }, [budget, ynabAccount]);\n\n    function handleBudgetChanged(event) {\n        let budgetId = event.target.value;\n        let newBudget = budgets.find(b => b.id === budgetId);\n        setBudget(newBudget);\n        setYnabAccount(null);\n    }\n\n    function handleAccountChanged(event) {\n        let accountId = event.target.value;\n        if(accountId === \"-\") {\n            setYnabAccount(null);\n            return;\n        }\n        let newAccount = budget.accounts.find(a => a.id === accountId);\n        setYnabAccount(newAccount);\n    }\n\n    return <div className=\"row\">\n        <div className=\"col\">{account.name}</div>\n        <div className=\"col form-group\">\n            <label>\n                Budget\n                <select className=\"form-control\" id=\"exampleFormControlSelect1\" onChange={handleBudgetChanged} value={budget.id}>\n                    {budgets.map(budget => <option value={budget.id} key={budget.id}>{budget.name}</option>)}\n                </select>\n            </label>\n        </div>\n        <div className=\"col form-group\">\n            <label>\n                Account\n                <select className=\"form-control\" id=\"exampleFormControlSelect1\" value={ynabAccount ? ynabAccount.id : \"-\"} onChange={handleAccountChanged}>\n                    <option value=\"-\" >-</option>\n                    {budget.accounts.map(account => <option value={account.id} key={account.id}>{account.name}</option>)}\n                </select>\n            </label>\n    </div>\n    </div>\n}\n\nexport default AccountRow;","import {budgets} from \"../store/selectors/ynab\";\nimport {connect} from \"react-redux\";\nimport AccountRow from \"../AccountRow\";\nimport {addMapping} from \"../store/actions/map\";\n\nfunction mapStateToProps(state) {\n    return {\n        budgets: budgets(state)\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addMapping: mapping => dispatch(addMapping(mapping))\n    }\n}\n\nconst YNABAccountRow = connect(mapStateToProps, mapDispatchToProps)(AccountRow);\nexport default YNABAccountRow;","import React from \"react\";\n\nfunction SendToYNABButton({sendToYNAB}) {\n    return <button type=\"button\" className=\"btn btn-primary text\" onClick={sendToYNAB} >Send to YNAB</button>\n}\n\nexport default SendToYNABButton;","import {sendTransations} from \"../store/actions/ynab\";\nimport {connect} from \"react-redux\";\nimport SendToYNABButton from \"../SendToYNABButton\";\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        sendToYNAB: () => dispatch(sendTransations())\n    }\n}\n\nconst YNABSendToYNABButton = connect(null, mapDispatchToProps)(SendToYNABButton);\n\nexport default YNABSendToYNABButton;","import React from 'react';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport YNABLoginButton from \"./containers/YNABLoginButton\";\nimport CSVDropZone from \"./containers/CSVDropZone\";\nimport YNABAccountRow from \"./containers/YNABAccountRow\";\nimport YNABSendToYNABButton from \"./containers/YNABSendToYnabButton\";\n\nfunction App({accounts, results, showCSVDropZone, showAccounts, showResults, getBudget}) {\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"text-center\">Comdirect YNAB Transaction Import</h1>\n            <div className=\"text-center\">\n                <YNABLoginButton/>\n            </div>\n            {showCSVDropZone ? <CSVDropZone/> : null}\n            {accounts.map(account => <YNABAccountRow account={account} />)}\n            {showAccounts ? <div className=\"text-right\"><YNABSendToYNABButton /></div> : null}\n            {showResults ? <ul>\n                {results.map((result, i) => <li key={i}>{getBudget(result.budget).name} - successful: {result.successful ? 'yes' : 'no'} - new transactions: {result.result.data.transaction_ids.length} - ignored transactions: {result.result.data.duplicate_import_ids.length}</li>)}\n            </ul> : null}\n        </div>\n    );\n}\n\nexport default App;\n","import {accessToken, budget, importFinished, importResults} from \"../store/selectors/ynab\";\nimport {connect} from \"react-redux\";\nimport App from \"../App\";\nimport {accounts} from \"../store/selectors/csv\";\n\nlet mapStateToProps = state => ({\n    accessToken: accessToken(state),\n    accounts: accounts(state),\n    results: importResults(state),\n    getBudget: bugetId => budget(state, bugetId),\n    showAccounts: accounts(state).length > 0 && !importFinished(state),\n    showCSVDropZone: accessToken(state) && accounts(state).length === 0 && !importFinished(state),\n    showResults: importFinished(state)\n});\n\nconst YNABApp = connect(mapStateToProps)(App);\n\nexport default YNABApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport {ynab} from './store/reducers/ynab';\nimport {csv} from './store/reducers/csv';\nimport {map} from \"./store/reducers/map\";\nimport {loadBudgets, login} from \"./store/actions/ynab\";\nimport thunkMiddleware from 'redux-thunk';\nimport {ynabMiddleware} from \"./store/middleware/ynab\";\nimport {accessToken as ynabAccessToken} from \"./store/selectors/ynab\";\nimport YNABApp from \"./containers/YNABApp\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(combineReducers({ynab, csv, map}), composeEnhancers(applyMiddleware(thunkMiddleware, ynabMiddleware)));\n\nlet accessTokenPattern = /#access_token=([a-z0-9-]+)/;\nif (window.location.hash && accessTokenPattern.test(window.location.hash)) {\n    sessionStorage.setItem(\"access_token\", window.location.hash.match(accessTokenPattern)[1]);\n}\n\nlet accessToken = sessionStorage.getItem(\"access_token\");\n\nstore.dispatch(login(accessToken)).then(() => {\n    if(ynabAccessToken(store.getState())) {\n        store.dispatch(loadBudgets());\n    }\n});\n\nReactDOM.render(<Provider store={store}><YNABApp /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {ADD_MAPPING} from \"../actions/map\";\n\nexport function map(state = {}, action) {\n    switch (action.type) {\n        case ADD_MAPPING:\n            return Object.assign({}, state, action.mapping);\n        default:\n            return state;\n    }\n}"],"sourceRoot":""}