{"version":3,"sources":["serviceWorker.js","store/actions/ynab.js","store/actions/general.js","store/actions/csv.js","store/reducers/ynab.js","store/reducers/csv.js","store/actions/map.js","store/selectors/map.js","store/selectors/csv.js","store/middleware/ynab.js","store/selectors/ynab.js","containers/YNABLoginButton.js","LoginButton.js","csv/parser/foreignTransactionParser.js","csv/parser/ownTransactionParser.js","csv/parser/cardDisposalTransactionParser.js","csv/parser/creditCardPayoffParser.js","csv/parser/creditCardTransactionParser.js","csv/parser/creditCardForeignCurrencyFeeParser.js","csv/parser/creditCartBillParser.js","csv/parser/creditCardCarryoverParser.js","csv/comdirectReader.js","DropZone.js","containers/CSVDropZone.js","AccountRow.js","containers/YNABAccountRow.js","SendToYNABButton.js","containers/YNABSendToYnabButton.js","App.js","containers/YNABApp.js","index.js","store/reducers/map.js"],"names":["Boolean","window","location","hostname","match","YNAB_SET_ACCESS_TOKEN","YNAB_LOGIN","YNAB_LOGIN_PENDING","YNAB_LOAD_BUDGETS","YNAB_SET_BUDGETS","YNAB_SEND_TRANSACTIONS","YNAB_ADD_IMPORT_RESULT","setAccessToken","accessToken","type","loginPending","addImportResult","budget","result","futureTransactions","successful","IMPORT_FINISHED","CSV_ADD_ACCOUNTS","action","budgets","addAccounts","state","accounts","ADD_MAPPING","getMapping","map","csv","findAccount","accountId","find","account","id","loadBudgets","dispatch","ynabClient","getBudgets","then","response","data","slice","sort","a","b","Date","getTime","Promise","all","getAccounts","accountsResponse","forEach","i","filter","closed","setBudgets","getBudget","budgetId","mapValue","value","parseInt","toFixed","mapTransactions","listOfAccounts","transactionCache","allTransactions","transactions","transaction","name","amountOfSimilarTransactions","t","valueDate","length","push","date","amount","payee","substr","memo","text","cleared","toISOString","mapTransaction","ynab","sendTransactions","mapping","csvAccount","mapToBudgets","imports","promise","createTransactions","catch","importFinished","importResults","authEndpoint","href","YNABLoginButton","connect","onClick","content","className","disabled","regex","parse","exec","reference","canParse","test","iban","bic","creditCardNo","trim","startAccountRegex","checkingTransactionRegex","dateRegex","YEAR","MONTH","DAY","VALUE_DATE","BOOKING_DATE","PROCESS","TEXT","VALUE","parseDate","dateString","parsers","ownTransactionParser","foreignTransactionParser","cardTransactionParser","creditCardPayoffParser","creditCardTransactionParser","creditCardForeignCurrencyFeeParser","creditCartBillParser","creditCardCarryoverParser","readTransaction","line","numberString","bookingDate","process","replace","parseFloat","parser","Error","parseText","readAccounts","split","index","firstLineIsInvalid","startsNewAccount","isCheckingTransaction","uuidv1","readAccount","readFile","file","resolve","fileReader","FileReader","addEventListener","readAsText","getBorderColor","isDraggingOver","handleDrag","handler","event","preventDefault","DropZone","useState","setDraggingOver","readFiles","files","fileReaders","fileResults","reduce","allAccounts","filesAccounts","read","error","console","log","style","border","padding","backgroundColor","onDragOver","onDragLeave","onDrop","dataTransfer","onChange","target","CSVDropZone","findBestMatch","searchResults","Fuse","keys","tokenize","threshold","search","AccountRow","addMapping","setBudget","ynabAccount","setYnabAccount","useEffect","newBudget","key","newAccount","YNABAccountRow","SendToYNABButton","sendToYNAB","YNABSendToYNABButton","App","results","showCSVDropZone","showAccounts","showResults","transaction_ids","duplicate_import_ids","YNABApp","bugetId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","Object","assign","applyMiddleware","thunkMiddleware","getState","next","user","getUser","login","accessTokenPattern","hash","sessionStorage","setItem","getItem","ynabAccessToken","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39f068f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const YNAB_SET_ACCESS_TOKEN = \"YNAB_SET_ACCESS_TOKEN\";\nexport const YNAB_LOGIN = \"YNAB_LOGIN\";\nexport const YNAB_LOGIN_PENDING = \"YNAB_LOGIN_PENDING\";\nexport const YNAB_LOAD_BUDGETS = \"YNAB_LOAD_BUDGET\";\nexport const YNAB_SET_BUDGETS = \"YNAB_SET_BUDGETS\";\nexport const YNAB_SEND_TRANSACTIONS = \"YNAB_SEND_TRANSACTIONS\";\nexport const YNAB_ADD_IMPORT_RESULT = \"YNAB_ADD_IMPORT_RESULT\";\n\nexport function setBudgets(budgets) {\n    return {type: YNAB_SET_BUDGETS, budgets};\n}\n\nexport function loadBudgets() {\n    return {type: YNAB_LOAD_BUDGETS};\n}\n\nexport function login(accessToken) {\n    return {type: YNAB_LOGIN, accessToken};\n}\n\nexport function setAccessToken(accessToken) {\n    return {type: YNAB_SET_ACCESS_TOKEN, accessToken};\n}\n\nexport function loginPending(loginPending) {\n    return {type: YNAB_LOGIN_PENDING, loginPending};\n}\n\nexport function sendTransations() {\n    return {type: YNAB_SEND_TRANSACTIONS};\n}\n\nexport function addImportResult(budget, result, futureTransactions, successful = true) {\n    return {type: YNAB_ADD_IMPORT_RESULT, budget, result, futureTransactions, successful};\n}","export const IMPORT_FINISHED = \"IMPORT_FINISHED\";\n\nexport function importFinished() {\n    return {type: IMPORT_FINISHED};\n}","export const CSV_ADD_ACCOUNTS = \"CSV_ADD_ACCOUNTS\";\n\nexport function addAccounts(accounts) {\n    return {\n        type: CSV_ADD_ACCOUNTS,\n        accounts\n    };\n}","import {YNAB_ADD_IMPORT_RESULT, YNAB_LOGIN_PENDING, YNAB_SET_ACCESS_TOKEN, YNAB_SET_BUDGETS} from \"../actions/ynab\";\nimport {IMPORT_FINISHED} from \"../actions/general\";\nimport {CSV_ADD_ACCOUNTS} from \"../actions/csv\";\n\nfunction accessToken(action) {\n    return action.accessToken;\n}\n\nfunction loginPending(action) {\n    return action.loginPending;\n}\n\nfunction budgets(action) {\n    return action.budgets;\n}\n\nfunction addImportResult(action) {\n    let {successful, result, budget, futureTransactions} = action;\n    return {successful, result, budget, futureTransactions};\n}\n\nexport function ynab(state = {importResults: []}, action) {\n    switch (action.type) {\n        case YNAB_SET_ACCESS_TOKEN:\n            return {...state, accessToken: accessToken(action)};\n        case YNAB_LOGIN_PENDING:\n            return {...state, loginPending: loginPending(action)};\n        case YNAB_SET_BUDGETS:\n            return {...state, budgets: budgets(action)};\n        case YNAB_ADD_IMPORT_RESULT:\n            return {...state, importResults: [...state.importResults, addImportResult(action)]};\n        case IMPORT_FINISHED:\n            return {...state, importFinished: true};\n        case CSV_ADD_ACCOUNTS:\n            return {...state, importFinished: false, importResults: []};\n        default:\n            return state;\n    }\n}","import {CSV_ADD_ACCOUNTS} from \"../actions/csv\";\nimport {IMPORT_FINISHED} from \"../actions/general\";\n\nfunction addAccounts(state, accounts) {\n    return {...state, accounts: [...state.accounts, ...accounts]}\n}\n\nexport function csv(state = {accounts: []}, action) {\n    switch (action.type) {\n        case CSV_ADD_ACCOUNTS:\n            return addAccounts(state, action.accounts);\n        case IMPORT_FINISHED:\n            return {accounts: []};\n        default:\n            return state;\n    }\n}","export const ADD_MAPPING = \"ADD_MAPPING\";\n\nexport function addMapping(mapping) {\n    return {\n        type: ADD_MAPPING,\n        mapping\n    }\n}","export const getMapping = state => state.map;","export const accounts = state => state.csv.accounts;\nexport const findAccount = (state, accountId) => accounts(state).find(account => account.id === accountId);","import * as ynab from 'ynab';\nimport {\n    addImportResult,\n    loginPending,\n    setAccessToken,\n    setBudgets,\n    YNAB_LOAD_BUDGETS,\n    YNAB_LOGIN,\n    YNAB_SEND_TRANSACTIONS\n} from \"../actions/ynab\";\nimport {getMapping} from \"../selectors/map\";\nimport {findAccount} from \"../selectors/csv\";\nimport {importFinished} from \"../actions/general\";\n\nfunction login(dispatch, accessToken) {\n    dispatch(loginPending(true));\n    let ynabClient = new ynab.API(accessToken);\n    return ynabClient.user.getUser().then(() => {\n        dispatch(setAccessToken(accessToken));\n        dispatch(loginPending(false));\n        return ynabClient;\n    }).catch(() => {\n        dispatch(setAccessToken(null));\n        dispatch(loginPending(false));\n        return null;\n    })\n}\n\nfunction loadBudgets(dispatch, ynabClient) {\n    return ynabClient.budgets.getBudgets().then(response => {\n        let budgets = response.data.budgets.slice();\n        budgets.sort((a, b) => new Date(b['last_modified_on']).getTime() - new Date(a['last_modified_on']).getTime());\n        Promise.all(budgets.map(budget => ynabClient.accounts.getAccounts(budget.id)))\n            .then(accountsResponse => {\n                accountsResponse\n                    .forEach((accountsResponse, i) => budgets[i].accounts = accountsResponse.data.accounts.filter(account => !account.closed));\n                dispatch(setBudgets(budgets));\n            });\n    });\n}\n\nfunction getBudget(budgets, budgetId) {\n    let budget = budgets[budgetId];\n    if (!budget) {\n        budgets[budgetId] = {\n            id: budgetId,\n            accounts: []\n        }\n    }\n    return budgets[budgetId];\n}\n\nfunction mapToBudgets(mapping) {\n    let budgets = {};\n    for (let csvAccount in mapping) {\n        if (!mapping[csvAccount].account) {\n            continue;\n        }\n        let budget = getBudget(budgets, mapping[csvAccount].budget);\n        budget.accounts.push({csv: csvAccount, ynab: mapping[csvAccount].account});\n    }\n    return budgets;\n}\n\nfunction cropPayeeName(name) {\n    if(name === null || name.length <= 50) {\n        return name;\n    }\n    return name.substr(0, 50);\n}\n\nfunction mapValue(value) {\n    return parseInt((value * 1000).toFixed(0));\n}\n\nfunction mapTransaction(transaction, accountId, transactionCache) {\n    let amountOfSimilarTransactions = transactionCache.filter(t => t.valueDate.getTime() === transaction.valueDate.getTime() && t.value === transaction.value).length;\n    transactionCache.push(transaction);\n    return {\n        'account_id': accountId,\n        date: transaction.valueDate,\n        amount: mapValue(transaction.value),\n        'payee_name': cropPayeeName(transaction.payee.name),\n        memo: transaction.text,\n        cleared: 'cleared',\n        'import_id': `comdirect:${mapValue(transaction.value)}:${transaction.valueDate.toISOString().substr(0, 10)}:${amountOfSimilarTransactions}`\n    }\n}\n\nfunction mapTransactions(listOfAccounts, state, transactionCache) {\n    let allTransactions = [];\n    for(let accounts of listOfAccounts) {\n        let csvAccount = findAccount(state, accounts.csv);\n        let transactions = csvAccount.transactions.map(transaction => mapTransaction(transaction, accounts.ynab, transactionCache));\n        transactions.forEach(transaction => allTransactions.push(transaction));\n    }\n    return allTransactions;\n}\n\nfunction sendTransactions(state, ynabClient, dispatch) {\n    let budgets = mapToBudgets(getMapping(state));\n    let transactionCache = [];\n    let imports = [];\n    for (let budget in budgets) {\n        let transactions = mapTransactions(budgets[budget].accounts, state, transactionCache);\n        let futureTransactions = transactions.length;\n        transactions = transactions.filter(transaction => transaction.date.getTime() < new Date().getTime());\n        futureTransactions = futureTransactions-transactions.length;\n        let promise = ynabClient.transactions.createTransactions(budget, {transactions})\n            .then(result => dispatch(addImportResult(budget, result, futureTransactions)))\n            .catch(() => dispatch(addImportResult(budget, null, null,false)));\n        imports.push(promise);\n    }\n    Promise.all(imports).then(() => dispatch(importFinished()));\n}\n\nexport const ynabMiddleware = ({dispatch, getState}) => {\n    let ynabClient;\n    return next => action => {\n        switch (action.type) {\n            case YNAB_LOGIN:\n                return login(dispatch, action.accessToken).then(result => {ynabClient = result});\n            case YNAB_LOAD_BUDGETS:\n                return loadBudgets(dispatch, ynabClient);\n            case YNAB_SEND_TRANSACTIONS:\n                return sendTransactions(getState(), ynabClient, dispatch);\n            default:\n                return next(action);\n        }\n    }\n};","export const accessToken = state => state.ynab.accessToken;\nexport const loginPending = state => state.ynab.loginPending;\nexport const budgets = state => state.ynab.budgets;\nexport const budget = (state, budgetId) => state.ynab.budgets.find(budget => budget.id === budgetId);\nexport const importFinished = state => state.ynab.importFinished;\nexport const importResults = state => state.ynab.importResults;","import {connect} from \"react-redux\";\nimport {accessToken, loginPending} from \"../store/selectors/ynab\";\nimport {LoginButton} from \"../LoginButton\";\n\nlet clientId = \"dae768ce4e0279d3d9f7721f0828630c72a16189ffc68ce9b1087ababb37a6f0\";\n\nlet authEndpoint = `https://app.youneedabudget.com/oauth/authorize?client_id=${clientId}&redirect_uri=${window.location.href}&response_type=token`;\n\nlet mapStateToProps = state => ({\n    accessToken: accessToken(state),\n    loginPending: loginPending(state),\n    onClick: () => window.location.href = authEndpoint\n});\n\nconst YNABLoginButton = connect(mapStateToProps)(LoginButton);\n\nexport default YNABLoginButton;","import React from \"react\";\n\nexport const LoginButton = ({accessToken, loginPending, onClick}) => {\n    if (accessToken) {\n        return null;\n    }\n    let content = loginPending ?\n        \"Logging in ...\" :\n        \"Login with YNAB\";\n    return <button type=\"button\" className=\"btn btn-primary text\" onClick={onClick} disabled={loginPending}>{content}</button>\n};","const regex = / Auftraggeber: (.+)Buchungstext: (.+) Ref\\. (.+) /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[1]\n        },\n        text: match[2],\n        reference: match[3]\n    }\n}\n\nexport default {parse, canParse}","const regex = / (Empfänger|Auftraggeber): (.+)Kto\\/IBAN: (\\w+) BLZ\\/BIC: (\\w+)( Buchungstext: (.+))? Ref\\. (.+)/;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[2],\n            iban: match[3],\n            bic: match[4]\n        },\n        text: match[6],\n        reference: match[7]\n    }\n}\n\nexport default {parse, canParse}","const regex = / Buchungstext: (.+) Ref\\. (.+) /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: null\n        },\n        text: match[1],\n        reference: match[2]\n    }\n}\n\nexport default {parse, canParse}","const regex = / Empfänger: (.+)Buchungstext: ((\\d+) Ueberweisung von Girokonto auf Visa-Karte) Ref\\. (.+) /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[1],\n            creditCardNo: match[3]\n        },\n        text: match[2],\n        reference: match[4]\n    }\n}\n\nexport default {parse, canParse}","const regex = / (.+[^A-Z])[A-Z].+?\\d\\d\\d/;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    let match = regex.exec(text);\n    return {\n        payee: {\n            name: match[1].trim()\n        }\n    }\n}\n\nexport default {parse, canParse}","const regex = / \\d\\.\\d\\d PROZ.AUSLANDSENTGELT /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    return {\n        payee: {\n            name: \"comdirect\"\n        },\n        text\n    }\n}\n\nexport default {parse, canParse}","const regex = / SUMME MONATSABRECHNUNG VISA /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    return {\n        payee: {\n            name: \"Visa\"\n        }\n    }\n}\n\nexport default {parse, canParse}","const regex = / UEBERTRAG AUF VISA-KARTE /;\n\nfunction canParse(text) {\n    return regex.test(text);\n}\n\nfunction parse(text) {\n    return {\n        payee: {\n            name: \"Self\"\n        },\n        text: text\n    }\n}\n\nexport default {parse, canParse}","import foreignTransactionParser from \"./parser/foreignTransactionParser\";\nimport ownTransactionParser from \"./parser/ownTransactionParser\";\nimport cardTransactionParser from \"./parser/cardDisposalTransactionParser\";\nimport creditCardPayoffParser from \"./parser/creditCardPayoffParser\";\nimport creditCardTransactionParser from \"./parser/creditCardTransactionParser\";\nimport creditCardForeignCurrencyFeeParser from \"./parser/creditCardForeignCurrencyFeeParser\";\nimport creditCartBillParser from \"./parser/creditCartBillParser\";\nimport creditCardCarryoverParser from \"./parser/creditCardCarryoverParser\";\nimport uuidv1 from 'uuid/v1';\n\nconst startAccountRegex = /\"Umsätze (.+) \";\"Zeitraum: ([\\d])+ Tage\";/;\nconst checkingTransactionRegex = /\"([\\d]{2}.[\\d]{2}.[\\d]{4})\";\"([\\d]{2}.[\\d]{2}.[\\d]{4})\";\"([^\"]*)\";(\"([^\"]*)\";)?\"([^\"]*)\";\"(-?[\\d.,]+)\";/;\nconst dateRegex = /([\\d]{2}).([\\d]{2}).([\\d]{4})/;\nconst textRegex = / ((Empfänger|Auftraggeber): (.*))?(Buchungstext: (.*))? Ref. (.*) /;\n\nconst YEAR = 3;\nconst MONTH = 2;\nconst DAY = 1;\n\nconst VALUE_DATE = 1;\nconst BOOKING_DATE = 2;\nconst PROCESS = 3;\nconst TEXT = 6;\nconst VALUE = 7;\n\nfunction parseDate(dateString) {\n    let match = dateRegex.exec(dateString);\n    return new Date(match[YEAR], match[MONTH]-1, match[DAY], 12);\n}\n\nfunction parseNumber(numberString) {\n    numberString = numberString.replace(/\\./g, \"\");\n    numberString = numberString.replace(\",\", \".\");\n    return parseFloat(numberString);\n}\n\nconst parsers = [\n    ownTransactionParser,\n    foreignTransactionParser,\n    cardTransactionParser,\n    creditCardPayoffParser,\n    creditCardTransactionParser,\n    creditCardForeignCurrencyFeeParser,\n    creditCartBillParser,\n    creditCardCarryoverParser];\n\nfunction parseText(text) {\n    let parser = parsers.find(parser => parser.canParse(text));\n    if (!parser) {\n        throw new Error(`Cannot parse text ${text}`);\n    }\n    return parser.parse(text);\n}\n\nfunction firstLineIsInvalid(index, line) {\n    return index === 0 && (line !== ';' && line.trim() !== '');\n}\n\nfunction startsNewAccount(line) {\n    return startAccountRegex.test(line);\n}\n\nfunction readAccount(line) {\n    let name = startAccountRegex.exec(line)[1];\n    let account = {name, id: uuidv1(), transactions: []};\n    return account;\n}\n\nfunction readTransaction(line) {\n    let match = checkingTransactionRegex.exec(line);\n\n\n    let transaction = {\n        valueDate: parseDate(match[VALUE_DATE]),\n        bookingDate: parseDate(match[BOOKING_DATE]),\n        process: match[PROCESS],\n        value: parseNumber(match[VALUE]),\n        ...parseText(match[TEXT])\n    };\n    return transaction;\n}\n\nfunction isCheckingTransaction(line) {\n    return checkingTransactionRegex.test(line);\n}\n\nfunction readAccounts(text) {\n    let accounts = [];\n    text = text.replace(/\\r\\n\"neu\";/g, \"\");\n    let lines = text.split(\"\\r\\n\");\n    lines.forEach((line, index) => {\n        if(firstLineIsInvalid(index, line)) {\n            throw new Error(\"Unexpected file format\");\n        }\n        if(startsNewAccount(line)){\n            accounts.push(readAccount(line));\n        } else if(isCheckingTransaction(line)) {\n            accounts[accounts.length-1].transactions.push(readTransaction(line));\n        }\n    });\n    return accounts.filter(account => account.transactions.length > 0);\n}\n\nfunction readFile(file) {\n    return new Promise((resolve) => {\n        let fileReader = new FileReader();\n        fileReader.addEventListener('load', () => {\n            resolve(readAccounts(fileReader.result));\n        });\n        fileReader.readAsText(file, \"cp1252\");\n    });\n}\n\nexport function read(files) {\n    let fileReaders = [];\n    for(let i = 0 ; i < files.length ; i++) {\n        fileReaders.push(readFile(files[i]));\n    }\n    return Promise.all(fileReaders)\n        .then(fileResults =>\n            fileResults.reduce((allAccounts,filesAccounts) => [...allAccounts, ...filesAccounts], [])\n        );\n}","import React, {useState} from \"react\";\nimport {read} from \"./csv/comdirectReader\";\n\nfunction getBorderColor(isDraggingOver) {\n    return isDraggingOver ? 'black' : 'grey';\n}\n\nfunction handleDrag(handler) {\n    return event => {\n        event.preventDefault();\n        handler();\n    }\n}\n\n\n\nfunction DropZone({addAccounts}) {\n\n    const [isDraggingOver, setDraggingOver] = useState(false);\n\n    let readFiles = function(files) {\n        return read(files)\n            .then(accounts => {\n                addAccounts(accounts)\n            }).catch(error => console.log(error));\n    };\n\n    let handleDrop = function(event) {\n        event.preventDefault();\n        setDraggingOver(false);\n        readFiles(event.dataTransfer.files);\n    };\n\n    let handleInputChanged = function (event) {\n        readFiles(event.target.files);\n    };\n\n    let style = {\n        border: `2px dashed ${getBorderColor(isDraggingOver)}`,\n        padding: '2.5rem',\n        backgroundColor: isDraggingOver ? '#f4f4f4' : '#fff'\n    };\n    return (<div\n                style={style}\n                className=\"text-center\"\n                onDragOver={handleDrag(() => setDraggingOver(true))}\n                onDragLeave={handleDrag(() => setDraggingOver(false))}\n                onDrop={handleDrop}>\n                <p>Drop CSV file here</p>\n                <p><input type=\"file\" onChange={handleInputChanged} /></p>\n            </div>);\n}\n\nexport default DropZone;","import {addAccounts} from \"../store/actions/csv\";\nimport {connect} from \"react-redux\";\nimport DropZone from \"../DropZone\";\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addAccounts: accounts => dispatch(addAccounts(accounts))\n    }\n}\n\nconst CSVDropZone = connect(null, mapDispatchToProps)(DropZone);\n\nexport default CSVDropZone;","import React, {useState, useEffect} from \"react\";\nimport Fuse from \"fuse.js\";\n\nfunction findBestMatch(account, budget) {\n    let fuse = new Fuse(budget.accounts, {\n        keys: ['name'],\n        tokenize: true,\n        threshold: 1.0\n    });\n\n    let searchResults = fuse.search(account.name.replace(/[^\\w\\s]/g, ' ') + \"comdirect\");\n    return searchResults.length > 0 ? searchResults[0] : null;\n}\n\nfunction AccountRow({account, budgets, addMapping}) {\n    const [budget, setBudget] = useState(budgets[0]);\n    const [ynabAccount, setYnabAccount] = useState(findBestMatch(account, budget));\n\n    useEffect(() => {\n        addMapping({\n            [account.id]: {\n                account: ynabAccount ? ynabAccount.id : null,\n                budget: budget.id\n            }\n        });\n    }, [budget, ynabAccount]);\n\n    function handleBudgetChanged(event) {\n        let budgetId = event.target.value;\n        let newBudget = budgets.find(b => b.id === budgetId);\n        setBudget(newBudget);\n        setYnabAccount(findBestMatch(account, newBudget));\n    }\n\n    function handleAccountChanged(event) {\n        let accountId = event.target.value;\n        if(accountId === \"-\") {\n            setYnabAccount(null);\n            return;\n        }\n        let newAccount = budget.accounts.find(a => a.id === accountId);\n        setYnabAccount(newAccount);\n    }\n\n    return <div className=\"row mt-3\" style={{backgroundColor: '#f4f4f4'}}>\n        <div className=\"col-12 h1\">{account.name}</div>\n        <div className=\"col-sm form-group\">\n            <label>Budget</label>\n            <select className=\"form-control\" id=\"exampleFormControlSelect1\" onChange={handleBudgetChanged} value={budget.id}>\n                {budgets.map(budget => <option value={budget.id} key={budget.id}>{budget.name}</option>)}\n            </select>\n        </div>\n        <div className=\"col-sm form-group\">\n            <label>Account</label>\n            <select className=\"form-control\" id=\"exampleFormControlSelect1\" value={ynabAccount ? ynabAccount.id : \"-\"} onChange={handleAccountChanged}>\n                <option value=\"-\" >-</option>\n                {budget.accounts.map(account => <option value={account.id} key={account.id}>{account.name}</option>)}\n            </select>\n        </div>\n    </div>\n}\n\nexport default AccountRow;","import {budgets} from \"../store/selectors/ynab\";\nimport {connect} from \"react-redux\";\nimport AccountRow from \"../AccountRow\";\nimport {addMapping} from \"../store/actions/map\";\n\nfunction mapStateToProps(state) {\n    return {\n        budgets: budgets(state)\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addMapping: mapping => dispatch(addMapping(mapping))\n    }\n}\n\nconst YNABAccountRow = connect(mapStateToProps, mapDispatchToProps)(AccountRow);\nexport default YNABAccountRow;","import React from \"react\";\n\nfunction SendToYNABButton({sendToYNAB}) {\n    return <button type=\"button\" className=\"btn btn-primary text\" onClick={sendToYNAB} >Send to YNAB</button>\n}\n\nexport default SendToYNABButton;","import {sendTransations} from \"../store/actions/ynab\";\nimport {connect} from \"react-redux\";\nimport SendToYNABButton from \"../SendToYNABButton\";\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        sendToYNAB: () => dispatch(sendTransations())\n    }\n}\n\nconst YNABSendToYNABButton = connect(null, mapDispatchToProps)(SendToYNABButton);\n\nexport default YNABSendToYNABButton;","import React from 'react';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport YNABLoginButton from \"./containers/YNABLoginButton\";\nimport CSVDropZone from \"./containers/CSVDropZone\";\nimport YNABAccountRow from \"./containers/YNABAccountRow\";\nimport YNABSendToYNABButton from \"./containers/YNABSendToYnabButton\";\n\nfunction App({accounts, results, showCSVDropZone, showAccounts, showResults, getBudget}) {\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"text-center\">comdirect to YNAB</h1>\n            {!showAccounts && !showResults && !showCSVDropZone ? <div className=\"row mt-5\">\n                <div className=\"col-lg-2\" />\n                <div className=\"col-lg-8\">\n                    <p>\n                        comdirect to YNAB parses CSV files exported from your comdirect accounts and imports your financial transactions to YNAB.\n                        In order to do so, you have to login using your YNAB account and grant this site write access to your YNAB account.\n                        To do so, use the button below. After that, drop the file you want to import to the highlighted area.\n                    </p>\n                    <h5>Tip</h5>\n                    <p>\n                        You can export the transactions from all your accounts at once. Drop this file here and choose the account at YNAB you want to import the transactions to.\n                    </p>\n                    <div className=\"text-center mt-5\">\n                        <YNABLoginButton/>\n                    </div>\n                </div>\n                <div className=\"col-lg-2\" />\n            </div> : null }\n            <div className=\"row mt-5\">\n                <div className=\"col-lg-2\" />\n                <div className=\"col-lg-8\">\n                    {showCSVDropZone ? <CSVDropZone/> : null}\n                    {accounts.map(account => <YNABAccountRow account={account} />)}\n                    {showAccounts ? <div className=\"text-right mt-3\"><YNABSendToYNABButton /></div> : null}\n                </div>\n                <div className=\"col-lg-2\" />\n            </div><\n            div className=\"row mt-5\">\n                <div className=\"col-lg-2\" />\n                <div className=\"col-lg-8\">\n                    {showResults ? results.map((result, i) =>\n                        <div className={`alert ${result.successful ? 'alert-success' : 'alert-danger'}`} key={i}>\n                            <h4 className=\"alert-heading\">{getBudget(result.budget).name}</h4>\n                            { result.successful &&\n                                <>\n                                    <p>Imported {result.result.data.transaction_ids.length} new transactions.</p>\n                                    {result.result.data.duplicate_import_ids.length > 0 &&\n                                        <>\n                                            <hr />\n                                            <p>{result.result.data.duplicate_import_ids.length} transactions has been imported before and are ignored.</p>\n                                        </>\n                                    }\n                                    {result.futureTransactions > 0 &&\n                                        <>\n                                            <hr />\n                                            <p>Did not import {result.futureTransactions} transaction with a future date.</p>\n                                        </>\n                                    }\n                                </>\n                            }\n                            { !result.successful &&\n                                <>\n                                    <p>Error while importing transactions.</p>\n                                </>\n                            }\n                        </div>\n                    ) : null}\n                </div>\n                <div className=\"col-lg-2\" />\n            </div>\n            <div className=\"row mt-5\">\n                <div className=\"col-lg-2\" />\n                <div className=\"col-lg-8\">\n                    <h6>Privacy Policy</h6>\n                    <p className=\"small\">\n                        This website reads financial transactions from CSV files exported from the comdirect Bank and sends those transactions to YNAB using their <a href=\"https://api.youneedabudget.com/\">API</a>.\n                        The CSV files are parsed in the browser and are thus not sent to any server. The transactions read from the files are send to the YNAB servers when you click \"Send to YNAB\".\n                        Please refer to the <a href=\"https://www.youneedabudget.com/privacy-policy/\">YNAB Privacy Policy</a> for further information.\n                    </p>\n                    <p className=\"small\">\n                        This site is hosted using GitHub Pages. GitHub may save technical information, including your IP address. Please refer to the <a href=\"https://help.github.com/en/articles/github-privacy-statement\">GitHub Privacy Policy</a>.\n                    </p>\n                </div>\n                <div className=\"col-lg-2\" />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import {accessToken, budget, importFinished, importResults} from \"../store/selectors/ynab\";\nimport {connect} from \"react-redux\";\nimport App from \"../App\";\nimport {accounts} from \"../store/selectors/csv\";\n\nlet mapStateToProps = state => ({\n    accessToken: accessToken(state),\n    accounts: accounts(state),\n    results: importResults(state),\n    getBudget: bugetId => budget(state, bugetId),\n    showAccounts: accounts(state).length > 0 && !importFinished(state),\n    showCSVDropZone: accessToken(state) && accounts(state).length === 0,\n    showResults: importFinished(state)\n});\n\nconst YNABApp = connect(mapStateToProps)(App);\n\nexport default YNABApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport {ynab} from './store/reducers/ynab';\nimport {csv} from './store/reducers/csv';\nimport {map} from \"./store/reducers/map\";\nimport {loadBudgets, login} from \"./store/actions/ynab\";\nimport thunkMiddleware from 'redux-thunk';\nimport {ynabMiddleware} from \"./store/middleware/ynab\";\nimport {accessToken as ynabAccessToken} from \"./store/selectors/ynab\";\nimport YNABApp from \"./containers/YNABApp\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(combineReducers({ynab, csv, map}), composeEnhancers(applyMiddleware(thunkMiddleware, ynabMiddleware)));\n\nlet accessTokenPattern = /#access_token=([a-z0-9-]+)/;\nif (window.location.hash && accessTokenPattern.test(window.location.hash)) {\n    sessionStorage.setItem(\"access_token\", window.location.hash.match(accessTokenPattern)[1]);\n}\n\nlet accessToken = sessionStorage.getItem(\"access_token\");\n\nstore.dispatch(login(accessToken)).then(() => {\n    if(ynabAccessToken(store.getState())) {\n        store.dispatch(loadBudgets());\n    }\n});\n\nReactDOM.render(<Provider store={store}><YNABApp /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {ADD_MAPPING} from \"../actions/map\";\nimport {IMPORT_FINISHED} from \"../actions/general\";\n\nexport function map(state = {}, action) {\n    switch (action.type) {\n        case ADD_MAPPING:\n            return Object.assign({}, state, action.mapping);\n        case IMPORT_FINISHED:\n            return {};\n        default:\n            return state;\n    }\n}"],"sourceRoot":""}